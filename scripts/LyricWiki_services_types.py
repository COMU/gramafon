################################################## 
# LyricWiki_services_types.py 
# generated by ZSI.generate.wsdl2python
##################################################


import ZSI
import ZSI.TCcompound
from ZSI.schema import LocalElementDeclaration, ElementDeclaration, TypeDefinition, GTD, GED
from ZSI.generate.pyclass import pyclass_type

##############################
# targetNamespace
# urn:LyricWiki
##############################

class ns0:
    targetNamespace = "urn:LyricWiki"

    class ArrayOfstring_Def(ZSI.TC.Array, TypeDefinition):
        #complexType/complexContent base="SOAP-ENC:Array"
        schema = "urn:LyricWiki"
        type = (schema, "ArrayOfstring")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ofwhat = ZSI.TC.String(None, typed=False)
            atype = (u'http://www.w3.org/2001/XMLSchema', u'string[]')
            ZSI.TCcompound.Array.__init__(self, atype, ofwhat, pname=pname, childnames='item', **kw)

    class AlbumResultArray_Def(ZSI.TC.Array, TypeDefinition):
        #complexType/complexContent base="SOAP-ENC:Array"
        schema = "urn:LyricWiki"
        type = (schema, "AlbumResultArray")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ofwhat = ZSI.TC.AnyType(None, typed=False)
            atype = (u'http://www.w3.org/2001/XMLSchema', u'AlbumResult[]')
            ZSI.TCcompound.Array.__init__(self, atype, ofwhat, pname=pname, childnames='item', **kw)

    class AlbumResult_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "urn:LyricWiki"
        type = (schema, "AlbumResult")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.AlbumResult_Def.schema
            TClist = [ZSI.TC.String(pname="artist", aname="_artist", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="album", aname="_album", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iint(pname="year", aname="_year", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._artist = None
                    self._album = None
                    self._year = None
                    return
            Holder.__name__ = "AlbumResult_Holder"
            self.pyclass = Holder

    class SongResult_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "urn:LyricWiki"
        type = (schema, "SongResult")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.SongResult_Def.schema
            TClist = [ZSI.TC.String(pname="artist", aname="_artist", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="song", aname="_song", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._artist = None
                    self._song = None
                    return
            Holder.__name__ = "SongResult_Holder"
            self.pyclass = Holder

    class LyricsResult_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "urn:LyricWiki"
        type = (schema, "LyricsResult")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.LyricsResult_Def.schema
            TClist = [ZSI.TC.String(pname="artist", aname="_artist", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="song", aname="_song", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="lyrics", aname="_lyrics", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="url", aname="_url", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._artist = None
                    self._song = None
                    self._lyrics = None
                    self._url = None
                    return
            Holder.__name__ = "LyricsResult_Holder"
            self.pyclass = Holder

    class SOTDResult_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "urn:LyricWiki"
        type = (schema, "SOTDResult")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.SOTDResult_Def.schema
            TClist = [ZSI.TC.String(pname="artist", aname="_artist", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="song", aname="_song", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="nominatedBy", aname="_nominatedBy", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="reason", aname="_reason", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="lyrics", aname="_lyrics", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._artist = None
                    self._song = None
                    self._nominatedBy = None
                    self._reason = None
                    self._lyrics = None
                    return
            Holder.__name__ = "SOTDResult_Holder"
            self.pyclass = Holder

    class AlbumDataArray_Def(ZSI.TC.Array, TypeDefinition):
        #complexType/complexContent base="SOAP-ENC:Array"
        schema = "urn:LyricWiki"
        type = (schema, "AlbumDataArray")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ofwhat = ZSI.TC.AnyType(None, typed=False)
            atype = (u'http://www.w3.org/2001/XMLSchema', u'AlbumData[]')
            ZSI.TCcompound.Array.__init__(self, atype, ofwhat, pname=pname, childnames='item', **kw)

    class AlbumData_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "urn:LyricWiki"
        type = (schema, "AlbumData")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.AlbumData_Def.schema
            TClist = [ZSI.TC.String(pname="album", aname="_album", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iint(pname="year", aname="_year", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="amazonLink", aname="_amazonLink", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="imgUrl", aname="_imgUrl", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="url", aname="_url", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("urn:LyricWiki","ArrayOfstring",lazy=False)(pname="songs", aname="_songs", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._album = None
                    self._year = None
                    self._amazonLink = None
                    self._imgUrl = None
                    self._url = None
                    self._songs = None
                    return
            Holder.__name__ = "AlbumData_Holder"
            self.pyclass = Holder

    class TopSongsArray_Def(ZSI.TC.Array, TypeDefinition):
        #complexType/complexContent base="SOAP-ENC:Array"
        schema = "urn:LyricWiki"
        type = (schema, "TopSongsArray")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ofwhat = ZSI.TC.AnyType(None, typed=False)
            atype = (u'http://www.w3.org/2001/XMLSchema', u'TopSong[]')
            ZSI.TCcompound.Array.__init__(self, atype, ofwhat, pname=pname, childnames='item', **kw)

    class TopSong_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "urn:LyricWiki"
        type = (schema, "TopSong")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.TopSong_Def.schema
            TClist = [ZSI.TCnumbers.Iint(pname="rank", aname="_rank", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="artist", aname="_artist", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="song", aname="_song", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="image", aname="_image", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="itunes", aname="_itunes", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="url", aname="_url", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._rank = None
                    self._artist = None
                    self._song = None
                    self._image = None
                    self._itunes = None
                    self._url = None
                    return
            Holder.__name__ = "TopSong_Holder"
            self.pyclass = Holder

# end class ns0 (tns: urn:LyricWiki)
